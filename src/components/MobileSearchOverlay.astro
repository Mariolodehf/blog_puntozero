---
interface Props {
  placeholder?: string;
}

const { placeholder = "Buscar artículos..." } = Astro.props;
---

<div id="mobile-search-overlay" class="hidden fixed inset-0 z-50 bg-white/95 dark:bg-gray-900/95 backdrop-blur-md flex items-center justify-center p-4 transition-opacity duration-300 ease-in-out opacity-0">
  <div class="w-full max-w-xl relative">
    <button id="close-search-button" aria-label="Cerrar búsqueda" class="absolute top-2 right-2 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200 text-gray-700 dark:text-gray-200">
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"
        />
      </svg>
    </button>
    <div class="relative">
      <input
        type="search"
        id="mobile-search-input"
        class="w-full px-4 py-3 pl-12 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-primary-500 dark:focus:border-primary-400 transition-all duration-300 shadow-sm hover:shadow-md focus:shadow-lg"
        placeholder={placeholder}
      />
      <div class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
        <svg
          class="w-5 h-5 text-gray-500 dark:text-gray-400 transition-colors duration-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
          />
        </svg>
      </div>
    </div>
  </div>
</div>

<script>
  const mobileSearchOverlay = document.getElementById('mobile-search-overlay') as HTMLElement;
  const mobileSearchInput = document.getElementById('mobile-search-input') as HTMLInputElement;
  const articles = document.querySelectorAll<HTMLElement>('article');

  // Función para manejar el filtrado (similar a SearchBar.astro)
  mobileSearchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();

    articles.forEach(article => {
      const title = article.querySelector('h2')?.textContent?.toLowerCase() || '';
      const description = article.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = Array.from(article.querySelectorAll('.tag')).map(tag => tag.textContent?.toLowerCase());
      
      const matches = title.includes(searchTerm) || 
                     description.includes(searchTerm) || 
                     tags.some(tag => tag && tag.includes(searchTerm));

      if (matches) {
        article.style.display = 'block';
        article.style.opacity = '0';
        article.style.transform = 'translateY(20px)';
        setTimeout(() => {
          article.style.opacity = '1';
          article.style.transform = 'translateY(0)';
        }, 50);
      } else {
        article.style.opacity = '0';
        article.style.transform = 'translateY(-20px)';
        setTimeout(() => {
          article.style.display = 'none';
        }, 300);
      }
    });
  });

  // Transición para mostrar/ocultar el overlay
  document.addEventListener('DOMContentLoaded', () => {
    if (mobileSearchOverlay.classList.contains('flex')) {
      setTimeout(() => {
        mobileSearchOverlay.style.opacity = '1';
      }, 10);
    } else {
      mobileSearchOverlay.style.opacity = '0';
    }
  });

  mobileSearchOverlay.addEventListener('transitionend', () => {
    if (mobileSearchOverlay.style.opacity === '0') {
      mobileSearchOverlay.classList.add('hidden');
    }
  });

  // Asegurarse de que el overlay esté oculto inicialmente y maneje la opacidad
  // Esto también se maneja en Header.astro al añadir la clase 'flex' o 'hidden'
  // Aquí solo nos preocupamos de la transición de opacidad

</script>

<style>
  #mobile-search-overlay.flex {
    opacity: 1;
  }
  #mobile-search-overlay.hidden {
    opacity: 0;
  }
</style> 