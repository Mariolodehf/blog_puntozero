---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { slugify } from '../../utils/slugify';
import Pagination from '../../components/Pagination.astro';

const POSTS_PER_PAGE = 6;

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const tags = [...new Set(posts.flatMap((post) => post.data.tags))];

  return tags.map((tag) => {
    const categoryPosts = posts.filter((post) => post.data.tags.includes(tag));
    const totalPages = Math.ceil(categoryPosts.length / POSTS_PER_PAGE);

    // Generar rutas para cada página de la categoría
    const paths = Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => ({
      params: { category: slugify(tag), page: page.toString() },
      props: {
        category: tag,
        posts: categoryPosts,
        totalPages,
        currentPage: page
      }
    }));

    // Añadir la ruta base de la categoría (página 1)
    return {
      params: { category: slugify(tag) },
      props: {
        category: tag,
        posts: categoryPosts,
        totalPages,
        currentPage: 1
      }
    };
  }).flat();
}

const { category } = Astro.params;
const { posts, totalPages, currentPage } = Astro.props;

// Calcular los posts para la página actual
const startIndex = (currentPage - 1) * POSTS_PER_PAGE;
const endIndex = startIndex + POSTS_PER_PAGE;
const paginatedPosts = posts.slice(startIndex, endIndex);

// Obtener subcategorías (otros tags usados en estos posts)
const subCategories = [...new Set(posts.flatMap((post) => post.data.tags).filter((tag) => tag !== category))];
---

<Layout
  title={`${category} | Categorías`}
  description={`Explora todos los artículos sobre ${category}. Encuentra contenido relacionado y descubre más sobre este tema.`}
>
  <section class="category-header">
    <h1>{category}</h1>
    <a href="/categories" class="back-link">← Ver todas las categorías</a>
  </section>

  {subCategories.length > 0 && (
    <div class="sub-categories">
      <h2>Subcategorías</h2>
      <div class="tags">
        {subCategories.map((tag) => (
          <a href={`/tags/${tag}`} class="tag">{tag}</a>
        ))}
      </div>
    </div>
  )}

  <div class="posts-grid">
    {paginatedPosts.map((post) => (
      <article class="post-card">
        <div class="post-content">
          <h2>
            <a href={`/blog/${slugify(post.data.title)}`}>{post.data.title}</a>
          </h2>
          <p>{post.data.description}</p>
          <div class="post-meta">
            <time datetime={post.data.pubDate.toISOString()}>
              {post.data.pubDate.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
            <div class="tags">
              {post.data.tags.map((tag) => (
                <a href={`/tags/${tag}`} class="tag">{tag}</a>
              ))}
            </div>
          </div>
        </div>
      </article>
    ))}
  </div>

  {totalPages > 1 && (
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl={`/categories/${slugify(category)}`}
    />
  )}
</Layout>

<style>
  .category-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .category-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: var(--text);
  }

  .back-link {
    color: var(--text-light);
    text-decoration: none;
    transition: color 0.2s;
  }

  .back-link:hover {
    color: rgb(var(--accent));
  }

  .sub-categories {
    margin-bottom: 3rem;
    text-align: center;
  }

  .sub-categories h2 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--text);
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .tag {
    background: rgba(var(--accent), 0.1);
    color: rgb(var(--accent));
    padding: 0.2rem 0.5rem;
    border-radius: 0.5rem;
    font-size: 0.8rem;
    text-decoration: none;
    transition: background-color 0.2s;
  }

  .tag:hover {
    background: rgba(var(--accent), 0.2);
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .post-card {
    background: var(--background);
    border: 1px solid var(--border);
    border-radius: 1rem;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .post-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
  }

  .post-content {
    padding: 1.5rem;
  }

  .post-card h2 {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
    line-height: 1.3;
  }

  .post-card h2 a {
    color: var(--text);
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-card h2 a:hover {
    color: rgb(var(--accent));
  }

  .post-card p {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-light);
  }

  @media (max-width: 768px) {
    .category-header h1 {
      font-size: 2rem;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style> 