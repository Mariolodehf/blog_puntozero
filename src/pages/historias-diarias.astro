---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Voces del Río - PuntoZero" fullWidth={true}>
  <div class="min-h-screen bg-black text-white">
    <!-- Header -->
    <div class="bg-gradient-to-b from-gray-900 to-black py-8 px-4">
      <div class="max-w-6xl mx-auto">
        <h1 class="text-4xl md:text-6xl font-bold text-center mb-4">🎙️ Voces del Río</h1>
        <p class="text-lg md:text-xl text-gray-300 text-center max-w-3xl mx-auto">
          Un espacio para compartir voces, sonidos, música y conversaciones que han marcado nuestro camino.
        </p>
      </div>
    </div>

    <!-- Controles principales -->
    <div class="max-w-6xl mx-auto px-4 py-8">
      <div class="flex flex-wrap gap-4 justify-center mb-8">
        <button 
          id="show-record-btn" 
          class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          🎤 Grabar mi voz
        </button>
        <button 
          id="show-upload-btn" 
          class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
        >
          📁 Subir audio
        </button>
      </div>

      <!-- Filtros de categoría -->
      <div class="flex flex-wrap gap-2 justify-center mb-8">
        <button 
          data-category="all" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200 active"
        >
          Todas
        </button>
        <button 
          data-category="entrevista" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200"
        >
          🎙️ Entrevistas
        </button>
        <button 
          data-category="historia" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200"
        >
          📖 Historias
        </button>
        <button 
          data-category="musica" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200"
        >
          🎵 Música
        </button>
        <button 
          data-category="sonido" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200"
        >
          🔊 Sonidos
        </button>
        <button 
          data-category="conversacion" 
          class="filter-btn bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors duration-200"
        >
          💬 Conversaciones
        </button>
      </div>

      <!-- Formulario de grabación (oculto) -->
      <div id="record-form-container" class="bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl p-6 mb-8 hidden">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold">🎤 Grabar mi voz</h2>
          <button 
            id="close-record-btn" 
            class="text-gray-400 hover:text-white text-2xl transition-colors duration-200"
          >
            ×
          </button>
        </div>
        <form id="record-form" class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium mb-2">Título</label>
              <input 
                type="text" 
                name="title" 
                required
                class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500"
                placeholder="Título de la grabación"
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">Categoría</label>
              <select 
                name="category" 
                required
                class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white focus:outline-none focus:border-red-500"
              >
                <option value="">Seleccionar categoría</option>
                <option value="entrevista">🎙️ Entrevista</option>
                <option value="historia">📖 Historia</option>
                <option value="musica">🎵 Música</option>
                <option value="sonido">🔊 Sonido</option>
                <option value="conversacion">💬 Conversación</option>
              </select>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Descripción</label>
            <textarea 
              name="description" 
              rows="3" 
              required
              class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500 resize-none"
              placeholder="Describe tu grabación..."
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Autor (opcional)</label>
            <input 
              type="text" 
              name="author" 
              class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500"
              placeholder="Tu nombre o seudónimo"
            />
          </div>
          
          <!-- Controles de grabación -->
          <div class="bg-white/5 rounded-lg p-4">
            <div class="flex items-center justify-center space-x-4 mb-4">
              <button 
                type="button" 
                id="start-record-btn"
                class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
              >
                🎤 Iniciar grabación
              </button>
              <button 
                type="button" 
                id="stop-record-btn"
                class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 hidden"
              >
                ⏹️ Detener grabación
              </button>
            </div>
            <div id="recording-status" class="text-center text-gray-400 hidden">
              <div class="inline-block animate-pulse">🔴 Grabando...</div>
              <div id="recording-time" class="text-sm mt-1">00:00</div>
            </div>
            <audio id="recorded-audio" controls class="w-full mt-4 hidden"></audio>
          </div>

          <div class="flex justify-end space-x-4">
            <button 
              type="button" 
              id="cancel-record-btn"
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
            >
              Cancelar
            </button>
            <button 
              type="submit" 
              id="save-record-btn"
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200 hidden"
            >
              Guardar grabación
            </button>
          </div>
        </form>
      </div>

      <!-- Formulario de subida (oculto) -->
      <div id="upload-form-container" class="bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl p-6 mb-8 hidden">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-2xl font-bold">📁 Subir archivo de audio</h2>
          <button 
            id="close-upload-btn" 
            class="text-gray-400 hover:text-white text-2xl transition-colors duration-200"
          >
            ×
          </button>
        </div>
        <form id="upload-form" class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium mb-2">Título</label>
              <input 
                type="text" 
                name="title" 
                required
                class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500"
                placeholder="Título del audio"
              />
            </div>
            <div>
              <label class="block text-sm font-medium mb-2">Categoría</label>
              <select 
                name="category" 
                required
                class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white focus:outline-none focus:border-red-500"
              >
                <option value="">Seleccionar categoría</option>
                <option value="entrevista">🎙️ Entrevista</option>
                <option value="historia">📖 Historia</option>
                <option value="musica">🎵 Música</option>
                <option value="sonido">🔊 Sonido</option>
                <option value="conversacion">💬 Conversación</option>
              </select>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Descripción</label>
            <textarea 
              name="description" 
              rows="3" 
              required
              class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500 resize-none"
              placeholder="Describe el audio..."
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Autor (opcional)</label>
            <input 
              type="text" 
              name="author" 
              class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white placeholder-gray-400 focus:outline-none focus:border-red-500"
              placeholder="Nombre del autor"
            />
          </div>
          <div>
            <label class="block text-sm font-medium mb-2">Archivo de audio</label>
            <input 
              type="file" 
              name="audio" 
              accept="audio/*"
              required
              class="w-full bg-white/5 border border-white/20 rounded-lg p-3 text-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-red-600 file:text-white hover:file:bg-red-700"
            />
          </div>
          <div class="flex justify-end space-x-4">
            <button 
              type="button" 
              id="cancel-upload-btn"
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
            >
              Cancelar
            </button>
            <button 
              type="submit" 
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-200"
            >
              Subir audio
            </button>
          </div>
        </form>
      </div>

      <!-- Galería de voces -->
      <div id="voces-gallery" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Las voces se cargarán dinámicamente aquí -->
      </div>

      <!-- Estado de carga -->
      <div id="loading" class="text-center py-8 hidden">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        <p class="mt-2 text-gray-400">Cargando voces...</p>
      </div>

      <!-- Estado vacío -->
      <div id="empty-state" class="text-center py-12 hidden">
        <div class="text-6xl mb-4">🎙️</div>
        <h3 class="text-xl font-semibold mb-2">No hay voces aún</h3>
        <p class="text-gray-400">Sé el primero en compartir una voz usando los botones de arriba.</p>
      </div>
    </div>
  </div>

      <script>
      // Importar funciones de autenticación
      import { isAdmin, setAdminStatus, checkAdminStatus } from '../utils/auth.ts';
      
      // Variables globales
      let voces = [];
      let currentCategory = 'all';
      let mediaRecorder = null;
      let audioChunks = [];
      let recordingStartTime = null;
      let recordingInterval = null;
      let isUserAdmin = false;

    // Elementos del DOM
    const showRecordBtn = document.getElementById('show-record-btn');
    const showUploadBtn = document.getElementById('show-upload-btn');
    const recordFormContainer = document.getElementById('record-form-container');
    const uploadFormContainer = document.getElementById('upload-form-container');
    const vocesGallery = document.getElementById('voces-gallery');
    const loadingElement = document.getElementById('loading');
    const emptyStateElement = document.getElementById('empty-state');
    const filterBtns = document.querySelectorAll('.filter-btn');

    // Elementos de grabación
    const startRecordBtn = document.getElementById('start-record-btn');
    const stopRecordBtn = document.getElementById('stop-record-btn');
    const recordingStatus = document.getElementById('recording-status');
    const recordingTime = document.getElementById('recording-time');
    const recordedAudio = document.getElementById('recorded-audio');
    const saveRecordBtn = document.getElementById('save-record-btn');

    // Cargar voces
    async function loadVoces(category = 'all') {
      try {
        showLoading(true);
        const url = category === 'all' ? '/api/voces' : `/api/voces?category=${category}`;
        const response = await fetch(url);
        if (response.ok) {
          voces = await response.json();
          renderVoces();
        } else {
          console.error('Error al cargar voces');
        }
      } catch (error) {
        console.error('Error:', error);
      } finally {
        showLoading(false);
      }
    }

    // Renderizar voces
    function renderVoces() {
      if (voces.length === 0) {
        vocesGallery.innerHTML = '';
        showEmptyState(true);
        return;
      }

      showEmptyState(false);
      vocesGallery.innerHTML = voces.map(voz => `
        <div class="bg-white/5 backdrop-blur-xl border border-white/20 rounded-2xl p-6 hover:bg-white/10 transition-colors duration-200">
          <div class="flex justify-between items-start mb-4">
            <div class="flex items-center space-x-2">
              <span class="text-2xl">${getCategoryIcon(voz.category)}</span>
              <span class="text-sm text-gray-400">${voz.category}</span>
            </div>
            ${isUserAdmin ? `
              <button 
                onclick="deleteVoz('${voz.id}')" 
                class="text-red-400 hover:text-red-300 text-sm font-medium transition-colors duration-200"
              >
                Eliminar
              </button>
            ` : ''}
          </div>
          <h3 class="text-xl font-bold mb-2">${voz.title}</h3>
          <p class="text-gray-300 mb-4">${voz.description}</p>
          <div class="mb-4">
            <audio controls class="w-full">
              <source src="${voz.audioUrl}" type="audio/mpeg">
              Tu navegador no soporta el elemento de audio.
            </audio>
          </div>
          <div class="flex justify-between items-center text-sm text-gray-400">
            <span>Por: ${voz.author}</span>
            <span>${voz.date}</span>
          </div>
        </div>
      `).join('');
    }

    // Obtener icono de categoría
    function getCategoryIcon(category) {
      const icons = {
        entrevista: '🎙️',
        historia: '📖',
        musica: '🎵',
        sonido: '🔊',
        conversacion: '💬'
      };
      return icons[category] || '🎵';
    }

    // Funciones para mostrar/ocultar formularios
    function showRecordForm() {
      recordFormContainer.classList.remove('hidden');
      showRecordBtn.classList.add('hidden');
      showUploadBtn.classList.add('hidden');
    }

    function hideRecordForm() {
      recordFormContainer.classList.add('hidden');
      showRecordBtn.classList.remove('hidden');
      showUploadBtn.classList.remove('hidden');
      resetRecording();
    }

    function showUploadForm() {
      uploadFormContainer.classList.remove('hidden');
      showRecordBtn.classList.add('hidden');
      showUploadBtn.classList.add('hidden');
    }

    function hideUploadForm() {
      uploadFormContainer.classList.add('hidden');
      showRecordBtn.classList.remove('hidden');
      showUploadBtn.classList.remove('hidden');
    }

    // Funciones de grabación
    async function startRecording() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);
        audioChunks = [];

        mediaRecorder.ondataavailable = (event) => {
          audioChunks.push(event.data);
        };

        mediaRecorder.onstop = () => {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          const audioUrl = URL.createObjectURL(audioBlob);
          recordedAudio.src = audioUrl;
          recordedAudio.classList.remove('hidden');
          saveRecordBtn.classList.remove('hidden');
        };

        mediaRecorder.start();
        recordingStartTime = Date.now();
        startRecordBtn.classList.add('hidden');
        stopRecordBtn.classList.remove('hidden');
        recordingStatus.classList.remove('hidden');
        
        recordingInterval = setInterval(updateRecordingTime, 1000);
      } catch (error) {
        console.error('Error al iniciar grabación:', error);
        alert('Error al acceder al micrófono. Asegúrate de dar permisos.');
      }
    }

    function stopRecording() {
      if (mediaRecorder && mediaRecorder.state === 'recording') {
        mediaRecorder.stop();
        mediaRecorder.stream.getTracks().forEach(track => track.stop());
        
        stopRecordBtn.classList.add('hidden');
        startRecordBtn.classList.remove('hidden');
        recordingStatus.classList.add('hidden');
        
        if (recordingInterval) {
          clearInterval(recordingInterval);
          recordingInterval = null;
        }
      }
    }

    function updateRecordingTime() {
      if (recordingStartTime) {
        const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
        const seconds = (elapsed % 60).toString().padStart(2, '0');
        recordingTime.textContent = `${minutes}:${seconds}`;
      }
    }

    function resetRecording() {
      audioChunks = [];
      recordingStartTime = null;
      if (recordingInterval) {
        clearInterval(recordingInterval);
        recordingInterval = null;
      }
      recordedAudio.classList.add('hidden');
      saveRecordBtn.classList.add('hidden');
      recordingStatus.classList.add('hidden');
      startRecordBtn.classList.remove('hidden');
      stopRecordBtn.classList.add('hidden');
    }

    // Crear nueva voz (grabación)
    async function createVozFromRecording(formData) {
      try {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        formData.append('audio', audioBlob, 'recording.wav');

        const response = await fetch('/api/voces', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          const newVoz = await response.json();
          voces.unshift(newVoz);
          renderVoces();
          hideRecordForm();
          showSuccessMessage('Voz guardada exitosamente');
        } else {
          const error = await response.json();
          showErrorMessage(error.error || 'Error al guardar la voz');
        }
      } catch (error) {
        console.error('Error:', error);
        showErrorMessage('Error al guardar la voz');
      }
    }

    // Crear nueva voz (subida)
    async function createVozFromUpload(formData) {
      try {
        const response = await fetch('/api/voces', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          const newVoz = await response.json();
          voces.unshift(newVoz);
          renderVoces();
          hideUploadForm();
          showSuccessMessage('Audio subido exitosamente');
        } else {
          const error = await response.json();
          showErrorMessage(error.error || 'Error al subir el audio');
        }
      } catch (error) {
        console.error('Error:', error);
        showErrorMessage('Error al subir el audio');
      }
    }

    // Eliminar voz
    async function deleteVoz(id) {
      if (!confirm('¿Estás seguro de que quieres eliminar esta voz?')) {
        return;
      }

      try {
        const response = await fetch('/api/voces', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id })
        });

        if (response.ok) {
          voces = voces.filter(voz => voz.id !== id);
          renderVoces();
          showSuccessMessage('Voz eliminada exitosamente');
        } else {
          const error = await response.json();
          showErrorMessage(error.error || 'Error al eliminar la voz');
        }
      } catch (error) {
        console.error('Error:', error);
        showErrorMessage('Error al eliminar la voz');
      }
    }

    // Funciones de utilidad
    function showLoading(show) {
      loadingElement.classList.toggle('hidden', !show);
    }

    function showEmptyState(show) {
      emptyStateElement.classList.toggle('hidden', !show);
    }

    function showSuccessMessage(message) {
      console.log('Éxito:', message);
    }

    function showErrorMessage(message) {
      console.error('Error:', message);
      alert(message);
    }

    // Event listeners
    showRecordBtn.addEventListener('click', showRecordForm);
    showUploadBtn.addEventListener('click', showUploadForm);
    
    document.getElementById('close-record-btn').addEventListener('click', hideRecordForm);
    document.getElementById('close-upload-btn').addEventListener('click', hideUploadForm);
    document.getElementById('cancel-record-btn').addEventListener('click', hideRecordForm);
    document.getElementById('cancel-upload-btn').addEventListener('click', hideUploadForm);

    startRecordBtn.addEventListener('click', startRecording);
    stopRecordBtn.addEventListener('click', stopRecording);

    // Formulario de grabación
    document.getElementById('record-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      await createVozFromRecording(formData);
    });

    // Formulario de subida
    document.getElementById('upload-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      await createVozFromUpload(formData);
    });

    // Filtros de categoría
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentCategory = btn.dataset.category;
        loadVoces(currentCategory);
      });
    });

    // Cargar voces al iniciar
    document.addEventListener('DOMContentLoaded', () => {
      // Verificar si el usuario es administrador
      isUserAdmin = checkAdminStatus();
      loadVoces();
    });

    // Hacer la función deleteVoz global
    window.deleteVoz = deleteVoz;
  </script>
</Layout> 